# compiler: R8
# compiler_version: 2.0.88
# min_api: 22
# pg_map_id: c547f45
# common_typos_disable
com.google.androidgamesdk.ChoreographerCallback$1 -> com.google.androidgamesdk.ChoreographerCallback$a:
com.google.androidgamesdk.ChoreographerCallback$a -> com.google.androidgamesdk.ChoreographerCallback$b:
com.google.androidgamesdk.SwappyDisplayManager$1 -> com.google.androidgamesdk.SwappyDisplayManager$a:
com.google.androidgamesdk.SwappyDisplayManager$a -> com.google.androidgamesdk.SwappyDisplayManager$b:
    java.util.concurrent.locks.Condition d -> c
    java.util.concurrent.locks.Lock c -> b
com.unity3d.splash.IUnityAdsListener -> a.a.a.a:
    void onUnityAdsError(com.unity3d.splash.UnityAds$UnityAdsError,java.lang.String) -> a
com.unity3d.splash.UnityAds -> a.a.a.b:
    boolean skipLaunchScreenAds -> a
    void initialize(android.app.Activity,java.lang.String,com.unity3d.splash.IUnityAdsListener) -> a
    boolean isSkipLaunchScreenAds() -> b
    void setSkipLaunchScreenAds(boolean) -> c
com.unity3d.splash.UnityAds$UnityAdsError -> a.a.a.b$a:
    com.unity3d.splash.UnityAds$UnityAdsError NOT_INITIALIZED -> a
    com.unity3d.splash.UnityAds$UnityAdsError INITIALIZE_FAILED -> b
    com.unity3d.splash.UnityAds$UnityAdsError[] $VALUES -> k
    com.unity3d.splash.UnityAds$UnityAdsError INIT_SANITY_CHECK_FAIL -> e
    com.unity3d.splash.UnityAds$UnityAdsError AD_BLOCKER_DETECTED -> f
    com.unity3d.splash.UnityAds$UnityAdsError INVALID_ARGUMENT -> c
    com.unity3d.splash.UnityAds$UnityAdsError VIDEO_PLAYER_ERROR -> d
    com.unity3d.splash.UnityAds$UnityAdsError SHOW_ERROR -> i
    com.unity3d.splash.UnityAds$UnityAdsError INTERNAL_ERROR -> j
    com.unity3d.splash.UnityAds$UnityAdsError FILE_IO_ERROR -> g
    com.unity3d.splash.UnityAds$UnityAdsError DEVICE_ID_ERROR -> h
com.unity3d.splash.services.IUnityServicesListener -> a.a.a.c.a:
    void onUnityServicesError(com.unity3d.splash.services.UnityServices$UnityServicesError,java.lang.String) -> a
com.unity3d.splash.services.UnityServices -> a.a.a.c.b:
    boolean _configurationInitialized -> a
    void initialize(android.app.Activity,java.lang.String,com.unity3d.splash.services.IUnityServicesListener,boolean,boolean) -> a
    boolean isSupported() -> b
com.unity3d.splash.services.UnityServices$UnityServicesError -> a.a.a.c.b$a:
    com.unity3d.splash.services.UnityServices$UnityServicesError INIT_SANITY_CHECK_FAIL -> b
    com.unity3d.splash.services.UnityServices$UnityServicesError INVALID_ARGUMENT -> a
    com.unity3d.splash.services.UnityServices$UnityServicesError[] $VALUES -> c
com.unity3d.splash.services.ads.UnityAdsImplementation -> a.a.a.c.c.a:
    void addListener(com.unity3d.splash.IUnityAdsListener) -> a
    void initialize(android.app.Activity,java.lang.String,com.unity3d.splash.IUnityAdsListener,boolean,boolean) -> b
com.unity3d.splash.services.ads.UnityAdsImplementation$1 -> a.a.a.c.c.a$a:
    com.unity3d.splash.IUnityAdsListener val$listener -> a
    void onUnityServicesError(com.unity3d.splash.services.UnityServices$UnityServicesError,java.lang.String) -> a
com.unity3d.splash.services.ads.properties.AdsProperties -> a.a.a.c.c.b.a:
    java.util.Set _listeners -> a
    void addListener(com.unity3d.splash.IUnityAdsListener) -> a
com.unity3d.splash.services.core.api.Lifecycle -> a.a.a.c.d.a.a:
    com.unity3d.splash.services.core.lifecycle.LifecycleListener _listener -> a
    com.unity3d.splash.services.core.lifecycle.LifecycleListener getLifecycleListener() -> a
    void setLifecycleListener(com.unity3d.splash.services.core.lifecycle.LifecycleListener) -> b
com.unity3d.splash.services.core.cache.CacheDirectory -> a.a.a.c.d.b.a:
    java.io.File _cacheDirectory -> c
    java.lang.String _cacheDirName -> a
    boolean _initialized -> b
    java.io.File createCacheDirectory(java.io.File,java.lang.String) -> a
    void createNoMediaFile(java.io.File) -> b
    java.io.File getCacheDirectory(android.content.Context) -> c
    boolean testCacheDirectory(java.io.File) -> d
com.unity3d.splash.services.core.cache.CacheDirectoryType -> a.a.a.c.d.b.b:
    com.unity3d.splash.services.core.cache.CacheDirectoryType[] $VALUES -> c
    com.unity3d.splash.services.core.cache.CacheDirectoryType EXTERNAL -> a
    com.unity3d.splash.services.core.cache.CacheDirectoryType INTERNAL -> b
com.unity3d.splash.services.core.configuration.Configuration -> a.a.a.c.d.c.a:
    java.lang.String _webViewUrl -> a
    java.lang.String[] _moduleConfigurationList -> f
    java.lang.String _webViewVersion -> c
    java.util.Map _moduleConfigurations -> e
    java.lang.Class[] _webAppApiClassList -> g
    java.lang.String _webViewHash -> b
    java.lang.String _webViewData -> d
    void createWebAppApiClassList() -> a
    com.unity3d.splash.services.core.configuration.IModuleConfiguration getModuleConfiguration(java.lang.String) -> b
    java.lang.String[] getModuleConfigurationList() -> c
    java.lang.Class[] getWebAppApiClassList() -> d
    java.lang.String getWebViewData() -> e
    java.lang.String getWebViewHash() -> f
    java.lang.String getWebViewUrl() -> g
    java.lang.String getWebViewVersion() -> h
    void makeRequest() -> i
    void setConfigUrl(java.lang.String) -> j
    void setWebViewData(java.lang.String) -> k
com.unity3d.splash.services.core.configuration.EnvironmentCheck -> a.a.a.c.d.c.b:
    boolean hasJavascriptInterface(java.lang.reflect.Method) -> a
    boolean isEnvironmentOk() -> b
    boolean testCacheDirectory() -> c
    boolean testProGuard() -> d
com.unity3d.splash.services.core.configuration.IModuleConfiguration -> a.a.a.c.d.c.c:
    boolean resetState(com.unity3d.splash.services.core.configuration.Configuration) -> a
    boolean initErrorState(com.unity3d.splash.services.core.configuration.Configuration,java.lang.String,java.lang.String) -> b
    boolean initCompleteState(com.unity3d.splash.services.core.configuration.Configuration) -> c
    java.lang.Class[] getWebAppApiClassList() -> d
    boolean initModuleState(com.unity3d.splash.services.core.configuration.Configuration) -> e
com.unity3d.splash.services.core.configuration.InitializeThread -> a.a.a.c.d.c.d:
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState _state -> a
    com.unity3d.splash.services.core.configuration.InitializeThread _thread -> c
    boolean _stopThread -> b
    void initialize(com.unity3d.splash.services.core.configuration.Configuration) -> a
com.unity3d.splash.services.core.configuration.InitializeThread$1 -> a.a.a.c.d.c.d$a:
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState -> a.a.a.c.d.c.d$b:
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateComplete -> a.a.a.c.d.c.d$c:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateConfig -> a.a.a.c.d.c.d$d:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> d
    int _maxRetries -> b
    int _retryDelay -> c
    int _retries -> a
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateCreate -> a.a.a.c.d.c.d$e:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    java.lang.String _webViewData -> b
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateError -> a.a.a.c.d.c.d$f:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> c
    java.lang.String _state -> a
    java.lang.Exception _exception -> b
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateInitModules -> a.a.a.c.d.c.d$g:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateLoadCache -> a.a.a.c.d.c.d$h:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateLoadWeb -> a.a.a.c.d.c.d$i:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    int _retryDelay -> d
    int _retries -> b
    int _maxRetries -> c
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateNetworkError -> a.a.a.c.d.c.d$j:
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState _erroredState -> d
    android.os.ConditionVariable _conditionVariable -> e
    long _lastConnectedEventTimeMs -> g
    int _receivedConnectedEvents -> f
    void onDisconnected() -> a
    void onConnected() -> b
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
    boolean shouldHandleConnectedEvent() -> d
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateReset -> a.a.a.c.d.c.d$k:
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> a
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
    void unregisterLifecycleCallbacks() -> d
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateReset$1 -> a.a.a.c.d.c.d$k$a:
    android.os.ConditionVariable val$cv -> b
    com.unity3d.splash.services.core.webview.WebViewApp val$currentApp -> a
com.unity3d.splash.services.core.configuration.InitializeThread$InitializeStateRetry -> a.a.a.c.d.c.d$l:
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState _state -> a
    int _delay -> b
    com.unity3d.splash.services.core.configuration.InitializeThread$InitializeState execute() -> c
com.unity3d.splash.services.core.connectivity.ConnectivityChangeReceiver -> a.a.a.c.d.d.a:
    com.unity3d.splash.services.core.connectivity.ConnectivityChangeReceiver _receiver -> a
    void register() -> a
    void unregister() -> b
com.unity3d.splash.services.core.connectivity.ConnectivityEvent -> a.a.a.c.d.d.b:
    com.unity3d.splash.services.core.connectivity.ConnectivityEvent[] $VALUES -> d
    com.unity3d.splash.services.core.connectivity.ConnectivityEvent DISCONNECTED -> b
    com.unity3d.splash.services.core.connectivity.ConnectivityEvent NETWORK_CHANGE -> c
    com.unity3d.splash.services.core.connectivity.ConnectivityEvent CONNECTED -> a
com.unity3d.splash.services.core.connectivity.ConnectivityMonitor -> a.a.a.c.d.d.c:
    java.util.HashSet _listeners -> f
    int _networkType -> e
    boolean _listening -> b
    boolean _webappMonitoring -> c
    int _connected -> a
    boolean _wifi -> d
    void addListener(com.unity3d.splash.services.core.connectivity.IConnectivityListener) -> a
    void connected() -> b
    void connectionStatusChanged() -> c
    void disconnected() -> d
    void initConnectionStatus() -> e
    void removeListener(com.unity3d.splash.services.core.connectivity.IConnectivityListener) -> f
    void sendToWebview(com.unity3d.splash.services.core.connectivity.ConnectivityEvent,boolean,int) -> g
    void startListening() -> h
    void stopListening() -> i
    void updateListeningStatus() -> j
com.unity3d.splash.services.core.connectivity.ConnectivityMonitor$1 -> a.a.a.c.d.d.c$a:
    int[] $SwitchMap$com$unity3d$splash$services$core$connectivity$ConnectivityEvent -> a
com.unity3d.splash.services.core.connectivity.ConnectivityNetworkCallback -> a.a.a.c.d.d.d:
    com.unity3d.splash.services.core.connectivity.ConnectivityNetworkCallback _impl -> a
    void register() -> a
    void unregister() -> b
com.unity3d.splash.services.core.connectivity.IConnectivityListener -> a.a.a.c.d.d.e:
    void onDisconnected() -> a
    void onConnected() -> b
com.unity3d.splash.services.core.device.Device -> a.a.a.c.d.e.a:
    java.lang.String getSIMMCC(android.content.Context) -> a
    java.lang.String getUniqueEventId() -> b
com.unity3d.splash.services.core.device.Storage -> a.a.a.c.d.e.b:
    com.unity3d.splash.services.core.device.StorageManager$StorageType _type -> c
    java.lang.String _targetFileName -> b
    com.unity3d.splash.services.core.device.StorageManager$StorageType getType() -> h
    boolean initStorage() -> i
    boolean readStorage() -> j
    boolean storageFileExists() -> k
    boolean writeStorage() -> l
com.unity3d.splash.services.core.device.StorageManager -> a.a.a.c.d.e.c:
    java.util.Map _storageFileMap -> a
    java.util.List _storages -> b
    void addStorageLocation(com.unity3d.splash.services.core.device.StorageManager$StorageType,java.lang.String) -> a
    com.unity3d.splash.services.core.device.Storage getStorage(com.unity3d.splash.services.core.device.StorageManager$StorageType) -> b
    boolean hasStorage(com.unity3d.splash.services.core.device.StorageManager$StorageType) -> c
    boolean init(android.content.Context) -> d
    void initStorage(com.unity3d.splash.services.core.device.StorageManager$StorageType) -> e
    boolean setupStorage(com.unity3d.splash.services.core.device.StorageManager$StorageType) -> f
com.unity3d.splash.services.core.device.StorageManager$StorageType -> a.a.a.c.d.e.c$a:
    com.unity3d.splash.services.core.device.StorageManager$StorageType[] $VALUES -> c
    com.unity3d.splash.services.core.device.StorageManager$StorageType PRIVATE -> a
    com.unity3d.splash.services.core.device.StorageManager$StorageType PUBLIC -> b
com.unity3d.splash.services.core.lifecycle.LifecycleListener -> a.a.a.c.d.f.a:
com.unity3d.splash.services.core.log.DeviceLog -> a.a.a.c.d.g.a:
    boolean FORCE_DEBUG_LOG -> e
    boolean LOG_ERROR -> a
    java.util.HashMap _deviceLogLevel -> f
    boolean LOG_WARNING -> b
    boolean LOG_INFO -> c
    boolean LOG_DEBUG -> d
    java.lang.String checkMessage(java.lang.String) -> a
    com.unity3d.splash.services.core.log.DeviceLogEntry createLogEntry(com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel,java.lang.String) -> b
    void debug(java.lang.String) -> c
    void entered() -> d
    void error(java.lang.String) -> e
    void exception(java.lang.String,java.lang.Exception) -> f
    com.unity3d.splash.services.core.log.DeviceLogLevel getLogLevel(com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel) -> g
    void info(java.lang.String) -> h
    void setLogLevel(int) -> i
    void warning(java.lang.String) -> j
    void write(com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel,java.lang.String) -> k
    void writeToLog(com.unity3d.splash.services.core.log.DeviceLogEntry) -> l
com.unity3d.splash.services.core.log.DeviceLog$1 -> a.a.a.c.d.g.a$a:
    int[] $SwitchMap$com$unity3d$splash$services$core$log$DeviceLog$UnityAdsLogLevel -> a
com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel -> a.a.a.c.d.g.a$b:
    com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel ERROR -> d
    com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel WARNING -> c
    com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel DEBUG -> b
    com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel[] $VALUES -> e
    com.unity3d.splash.services.core.log.DeviceLog$UnityAdsLogLevel INFO -> a
com.unity3d.splash.services.core.log.DeviceLogEntry -> a.a.a.c.d.g.b:
    java.lang.StackTraceElement _stackTraceElement -> c
    com.unity3d.splash.services.core.log.DeviceLogLevel _logLevel -> a
    java.lang.String _originalMessage -> b
    com.unity3d.splash.services.core.log.DeviceLogLevel getLogLevel() -> a
    java.lang.String getParsedMessage() -> b
com.unity3d.splash.services.core.log.DeviceLogLevel -> a.a.a.c.d.g.c:
    java.lang.String _receivingMethodName -> a
    java.lang.String getLogTag() -> a
    java.lang.String getReceivingMethodName() -> b
com.unity3d.splash.services.core.misc.JsonStorage -> a.a.a.c.d.h.a:
    org.json.JSONObject _data -> a
    boolean delete(java.lang.String) -> a
    java.lang.Object findObject(java.lang.String) -> b
    java.lang.Object get(java.lang.String) -> c
    org.json.JSONObject getData() -> d
    java.lang.String getParentObjectTreeFor(java.lang.String) -> e
    boolean initData() -> f
    void setData(org.json.JSONObject) -> g
com.unity3d.splash.services.core.misc.Utilities -> a.a.a.c.d.h.b:
    java.lang.String Sha256(java.lang.String) -> a
    java.lang.String Sha256(byte[]) -> b
    byte[] readFileBytes(java.io.File) -> c
    void runOnUiThread(java.lang.Runnable) -> d
    void runOnUiThread(java.lang.Runnable,long) -> e
    java.lang.String toHexString(byte[]) -> f
    boolean writeFile(java.io.File,java.lang.String) -> g
com.unity3d.splash.services.core.misc.ViewUtilities -> a.a.a.c.d.h.c:
    void setBackground(android.view.View,android.graphics.drawable.Drawable) -> a
com.unity3d.splash.services.core.properties.ClientProperties -> a.a.a.c.d.i.a:
    android.content.Context _applicationContext -> a
    android.app.Application _application -> b
    java.lang.String _gameId -> c
    android.app.Application getApplication() -> a
    android.content.Context getApplicationContext() -> b
    java.lang.String getGameId() -> c
    void setApplication(android.app.Application) -> d
    void setApplicationContext(android.content.Context) -> e
    void setGameId(java.lang.String) -> f
com.unity3d.splash.services.core.properties.SdkProperties -> a.a.a.c.d.i.b:
    com.unity3d.splash.services.core.cache.CacheDirectory _cacheDirectory -> b
    java.lang.String _configUrl -> a
    boolean _debugMode -> c
    java.io.File getCacheDirectory() -> a
    java.io.File getCacheDirectory(android.content.Context) -> b
    java.lang.String getConfigUrl() -> c
    boolean getDebugMode() -> d
    java.lang.String getDefaultConfigUrl(java.lang.String) -> e
    java.lang.String getLocalStorageFilePrefix() -> f
    java.lang.String getLocalWebViewFile() -> g
    int getVersionCode() -> h
    java.lang.String getVersionName() -> i
    void setCacheDirectory(com.unity3d.splash.services.core.cache.CacheDirectory) -> j
    void setDebugMode(boolean) -> k
    void setInitializationTime(long) -> l
    void setInitialized(boolean) -> m
    void setListener(com.unity3d.splash.services.IUnityServicesListener) -> n
    void setPerPlacementLoadEnabled(boolean) -> o
    void setTestMode(boolean) -> p
com.unity3d.splash.services.core.request.IWebRequestProgressListener -> a.a.a.c.d.j.a:
    void onRequestStart(java.lang.String,long,int,java.util.Map) -> a
    void onRequestProgress(java.lang.String,long,long) -> b
com.unity3d.splash.services.core.request.NetworkIOException -> a.a.a.c.d.j.b:
com.unity3d.splash.services.core.request.WebRequest -> a.a.a.c.d.j.c:
    java.util.Map _headers -> d
    int _readTimeout -> j
    java.net.URL _url -> a
    long _contentLength -> g
    int _connectTimeout -> i
    int _responseCode -> f
    com.unity3d.splash.services.core.request.IWebRequestProgressListener _progressListener -> k
    boolean _canceled -> h
    java.lang.String _body -> c
    java.util.Map _responseHeaders -> e
    java.lang.String _requestType -> b
    java.lang.String getBody() -> a
    int getConnectTimeout() -> b
    java.util.Map getHeaders() -> c
    java.net.HttpURLConnection getHttpUrlConnectionWithHeaders() -> d
    java.lang.String getQuery() -> e
    int getReadTimeout() -> f
    java.lang.String getRequestType() -> g
    int getResponseCode() -> h
    java.net.URL getUrl() -> i
    boolean isCanceled() -> j
    java.lang.String makeRequest() -> k
    long makeStreamRequest(java.io.OutputStream) -> l
    void setBody(java.lang.String) -> m
com.unity3d.splash.services.core.request.WebRequest$RequestType -> a.a.a.c.d.j.c$a:
    com.unity3d.splash.services.core.request.WebRequest$RequestType POST -> a
    com.unity3d.splash.services.core.request.WebRequest$RequestType GET -> b
    com.unity3d.splash.services.core.request.WebRequest$RequestType HEAD -> c
    com.unity3d.splash.services.core.request.WebRequest$RequestType[] $VALUES -> d
com.unity3d.splash.services.core.webview.WebView -> a.a.a.c.d.k.a:
    java.lang.reflect.Method _evaluateJavascript -> a
    java.lang.reflect.Method access$000() -> a
    void invokeJavascript(java.lang.String) -> b
com.unity3d.splash.services.core.webview.WebView$JavaScriptInvocation -> a.a.a.c.d.k.a$a:
    com.unity3d.splash.services.core.webview.WebView this$0 -> c
    java.lang.String _jsString -> a
    android.webkit.WebView _webView -> b
com.unity3d.splash.services.core.webview.WebViewApp -> a.a.a.c.d.k.b:
    com.unity3d.splash.services.core.webview.WebView _webView -> b
    com.unity3d.splash.services.core.configuration.Configuration _configuration -> c
    android.os.ConditionVariable _conditionVariable -> f
    com.unity3d.splash.services.core.webview.WebViewApp _currentApp -> e
    boolean _webAppLoaded -> a
    java.util.HashMap _nativeCallbacks -> d
    android.os.ConditionVariable access$300() -> a
    boolean create(com.unity3d.splash.services.core.configuration.Configuration) -> b
    com.unity3d.splash.services.core.webview.bridge.NativeCallback getCallback(java.lang.String) -> c
    com.unity3d.splash.services.core.configuration.Configuration getConfiguration() -> d
    com.unity3d.splash.services.core.webview.WebViewApp getCurrentApp() -> e
    com.unity3d.splash.services.core.webview.WebView getWebView() -> f
    boolean invokeCallback(com.unity3d.splash.services.core.webview.bridge.Invocation) -> g
    void invokeJavascriptMethod(java.lang.String,java.lang.String,org.json.JSONArray) -> h
    boolean isWebAppLoaded() -> i
    void removeCallback(com.unity3d.splash.services.core.webview.bridge.NativeCallback) -> j
    boolean sendEvent(java.lang.Enum,java.lang.Enum,java.lang.Object[]) -> k
    void setConfiguration(com.unity3d.splash.services.core.configuration.Configuration) -> l
    void setCurrentApp(com.unity3d.splash.services.core.webview.WebViewApp) -> m
    void setWebAppInitialized(boolean) -> n
    void setWebAppLoaded(boolean) -> o
    void setWebView(com.unity3d.splash.services.core.webview.WebView) -> p
com.unity3d.splash.services.core.webview.WebViewApp$1 -> a.a.a.c.d.k.b$a:
    com.unity3d.splash.services.core.configuration.Configuration val$configuration -> a
com.unity3d.splash.services.core.webview.WebViewApp$WebAppChromeClient -> a.a.a.c.d.k.b$b:
com.unity3d.splash.services.core.webview.WebViewApp$WebAppClient -> a.a.a.c.d.k.b$c:
com.unity3d.splash.services.core.webview.WebViewEventCategory -> a.a.a.c.d.k.c:
    com.unity3d.splash.services.core.webview.WebViewEventCategory BANNER -> b
    com.unity3d.splash.services.core.webview.WebViewEventCategory VIDEOPLAYER -> c
    com.unity3d.splash.services.core.webview.WebViewEventCategory REQUEST -> d
    com.unity3d.splash.services.core.webview.WebViewEventCategory RESOLVE -> e
    com.unity3d.splash.services.core.webview.WebViewEventCategory ADUNIT -> a
    com.unity3d.splash.services.core.webview.WebViewEventCategory LOAD_API -> r
    com.unity3d.splash.services.core.webview.WebViewEventCategory[] $VALUES -> s
    com.unity3d.splash.services.core.webview.WebViewEventCategory ANALYTICS -> n
    com.unity3d.splash.services.core.webview.WebViewEventCategory AR -> o
    com.unity3d.splash.services.core.webview.WebViewEventCategory PERMISSIONS -> p
    com.unity3d.splash.services.core.webview.WebViewEventCategory STORE -> q
    com.unity3d.splash.services.core.webview.WebViewEventCategory LIFECYCLE -> j
    com.unity3d.splash.services.core.webview.WebViewEventCategory DEVICEINFO -> k
    com.unity3d.splash.services.core.webview.WebViewEventCategory WEBPLAYER -> l
    com.unity3d.splash.services.core.webview.WebViewEventCategory PURCHASING -> m
    com.unity3d.splash.services.core.webview.WebViewEventCategory CACHE -> f
    com.unity3d.splash.services.core.webview.WebViewEventCategory CONNECTIVITY -> g
    com.unity3d.splash.services.core.webview.WebViewEventCategory STORAGE -> h
    com.unity3d.splash.services.core.webview.WebViewEventCategory BROADCAST -> i
com.unity3d.splash.services.core.webview.bridge.CallbackStatus -> a.a.a.c.d.k.d.a:
    com.unity3d.splash.services.core.webview.bridge.CallbackStatus ERROR -> b
    com.unity3d.splash.services.core.webview.bridge.CallbackStatus OK -> a
    com.unity3d.splash.services.core.webview.bridge.CallbackStatus[] $VALUES -> c
com.unity3d.splash.services.core.webview.bridge.Invocation -> a.a.a.c.d.k.d.b:
    java.util.concurrent.atomic.AtomicInteger _idCount -> d
    java.util.Map _invocationSets -> e
    java.util.ArrayList _responses -> b
    int _invocationId -> c
    java.util.ArrayList _invocations -> a
    void addInvocation(java.lang.String,java.lang.String,java.lang.Object[],com.unity3d.splash.services.core.webview.bridge.WebViewCallback) -> a
    int getId() -> b
    com.unity3d.splash.services.core.webview.bridge.Invocation getInvocationById(int) -> c
    java.util.ArrayList getResponses() -> d
    boolean nextInvocation() -> e
    void sendInvocationCallback() -> f
    void setInvocationResponse(com.unity3d.splash.services.core.webview.bridge.CallbackStatus,java.lang.Enum,java.lang.Object[]) -> g
com.unity3d.splash.services.core.webview.bridge.NativeCallback -> a.a.a.c.d.k.d.c:
    java.lang.String _id -> b
    java.lang.reflect.Method _callback -> a
    java.lang.String getId() -> a
    void invoke(java.lang.String,java.lang.Object[]) -> b
com.unity3d.splash.services.core.webview.bridge.WebViewBridge -> a.a.a.c.d.k.d.d:
    java.util.HashMap _classTable -> a
    java.lang.reflect.Method findMethod(java.lang.String,java.lang.String,java.lang.Object[]) -> a
    java.lang.Class[] getTypes(java.lang.Object[]) -> b
    java.lang.Object[] getValues(java.lang.Object[],com.unity3d.splash.services.core.webview.bridge.WebViewCallback) -> c
    void handleCallback(java.lang.String,java.lang.String,java.lang.Object[]) -> d
    void handleInvocation(java.lang.String,java.lang.String,java.lang.Object[],com.unity3d.splash.services.core.webview.bridge.WebViewCallback) -> e
    void setClassTable(java.lang.Class[]) -> f
com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError -> a.a.a.c.d.k.d.e:
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError CLASS_NOT_EXPOSED -> b
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError GETALLOWEDMETHODS_NOT_FOUND -> c
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError GETALLOWEDMETHODS_INVOCATION_FAILED -> d
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError METHOD_NOT_FOUND -> e
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError CLASS_NOT_FOUND -> a
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError INVOCATION_FAILED -> j
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError[] $VALUES -> k
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError METHOD_UNALLOWED -> f
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError DATA_JSON_PARSE_FAILED -> g
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError DATA_GET_PARAMETER_VALUE_FAILED -> h
    com.unity3d.splash.services.core.webview.bridge.WebViewBridgeError DATA_PARAMETER_NULL -> i
com.unity3d.splash.services.core.webview.bridge.WebViewBridgeInterface -> a.a.a.c.d.k.d.f:
    java.lang.Object[] getParameters(org.json.JSONArray) -> a
com.unity3d.splash.services.core.webview.bridge.WebViewCallback -> a.a.a.c.d.k.d.g:
    boolean _invoked -> a
    int _invocationId -> b
    java.lang.String _callbackId -> c
    void error(java.lang.Enum,java.lang.Object[]) -> a
    int getInvocationId() -> b
    void invoke(com.unity3d.splash.services.core.webview.bridge.CallbackStatus,java.lang.Enum,java.lang.Object[]) -> c
com.unity3d.splash.services.core.webview.bridge.WebViewCallback$1 -> a.a.a.c.d.k.d.g$a:
    com.unity3d.splash.services.core.webview.bridge.WebViewCallback createFromParcel(android.os.Parcel) -> a
    com.unity3d.splash.services.core.webview.bridge.WebViewCallback[] newArray(int) -> b
com.unity3d.splash.services.core.webview.bridge.WebViewExposed -> a.a.a.c.d.k.d.h:
